I"
<!-- _includes/image.html -->
<div class="image-wrapper">
  
  <div class="boxed">
  
    
        <img src="https://gpldecha.github.io/images//projects/pmf/pmf_example.png" alt="PMF example" align="middle" />
    
  
  </div>
  

  
  <br />
    <div class="boxed">
        <p class="image-caption"> <b>Figure: PMF example</b> <a name=""></a>    <b>Left:</b> Point Mass Filter: intensity of blue regions is proportional to the probability that the
            agent (orange pack-man) occupies this region. <b>Right:</b> Likelihood of the location the agent could be in given
            a measurement (range and bearing shown in red).</p>
      </div>
  
</div>

<!-- KaTeX -->
<script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>

<ul>
  <li><strong>Matlab</strong> implementation of PMF can be found here: <a href="https://github.com/gpldecha/point-mass-filter">point-mass-filter</a></li>
</ul>

<p>The Point Mass Filter (PMF) is the deterministic counter part of the Particle Filter (PF). That is
the PMF does not require a re-sampling step. This is advantageous both computational speed and it
considerably reduces the black art necessary for tuning the parameters of the PF.</p>

<p>Instead of representing the filtered probability distribution \(p(x_t|y_{0:t},u_{1:t})\) by a set of samples drawn
from a proposal distribution, as it is the case for PF, the state space \(x\) is deterministically discretized and represented by a grid. The value of each grid point or cell contains a valid probability in contrast to the PF where a point or particle represents a sample drawn from a proposal distribution as the true probability distribution is unknown. The PMF directly estimates the filtered probability distribution.</p>

<p>Summary of the main differences (pros/cons) of the PMF and PF.</p>

<h3 id="pmf">PMF</h3>

<ul>
  <li>
    <p>PMF grid values are probabilities whilst the PF particles are samples draw from an proposal distribution. If you wanted
to get an estimation of the filtered probability when using a PF, you would have to extract it from the set of particles
by either fitting a Gaussian Mixture Model to them (this is one example) or integrate the number of particles within
discretized intervals.</p>
  </li>
  <li>
    <p>PMF has no re-sampling step which reduces computation and as a result there is no need to tune the hyper-parameters
of a re-sampling kernel (usually a Gaussian) which is necessary for PF.</p>
  </li>
  <li>
    <p>PMF parameters are intuitive. You can set the minimum and maximum resolution of the grid which will dynamically resize as wanted.</p>
  </li>
  <li>
    <p>The PF is straight forward the implement, but hard to tune. The PMF is &#8220;harder&#8221; to implement but easy to tune.</p>
  </li>
</ul>
:EF